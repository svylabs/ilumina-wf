{
  "execution": {
    "action_name": "borrow",
    "contract_name": "StableBaseCDP",
    "function_name": "borrow",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "safes[safeId].borrowedAmount",
            "type": "mapping",
            "summary_of_update": "Updates the safe's borrowedAmount.",
            "has_conditional_updates": false,
            "conditions": []
          },
          {
            "state_variable_name": "totalDebt",
            "type": "uint256",
            "summary_of_update": "Updates totalDebt by adding the borrowed amount.",
            "has_conditional_updates": false,
            "conditions": []
          }
        ]
      }
    ]
  },
  "detail": {
    "action_name": "borrow",
    "contract_name": "StableBaseCDP",
    "function_name": "borrow",
    "pre_execution_parameter_generation_rules": [
      "The `safeId` is provided by the user, and must correspond to an existing safe in the `safes` mapping.",
      "The `borrowAmount` is provided by the user and must be greater than 0.",
      "The maximum allowable `borrowAmount` is calculated as `(collateralValueInUSD / minimumCollateralizationRatio) - borrowedAmount - interestAccumulated`. The user-provided `borrowAmount` must be less than or equal to this calculated maximum."
    ],
    "on_execution_state_updates_made": [
      "The `safes[safeId].borrowedAmount` is increased by `borrowAmount`.  If the safe does not exist, the transaction will revert.",
      "The `totalDebt` is increased by `borrowAmount`. If an overflow occurs during the addition, the transaction will revert."
    ],
    "post_execution_contract_state_validation_rules": [
      "The new `safes[safeId].borrowedAmount` must equal the previous `safes[safeId].borrowedAmount` plus `borrowAmount`.",
      "The new `totalDebt` must equal the previous `totalDebt` plus `borrowAmount`.",
      "The collateralization ratio for `safeId` (calculated as `(collateralValueInUSD) / (borrowedAmount + interestAccumulated)`) must be greater than or equal to `minimumCollateralizationRatio`."
    ]
  }
}