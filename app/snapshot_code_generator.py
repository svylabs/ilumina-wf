import os
import json
from .models import SnapshotDataStructure, DeploymentInstruction
from .context import RunContext, prepare_context_lazy

class SnapshotCodeGenerator:
    def __init__(self, context: RunContext):
        self.context = context

    def generate(self):
        """
        Generate the snapshot data structure for all contracts in the project.
        """
        #contracts = self.context.deployed_contracts()
        deployment_instructions = self.context.deployment_instructions()
        interfaces = ""
        for item in deployment_instructions.sequence:
            if item.type == "deploy":
                contract_name = item.contract
                #deployed_contract = self._get_deployed_contract(contract_name, contracts, deployment_instructions)
                print(f"Generating snapshot data structure for {contract_name}...")
                snapshot_path = self.context.snapshot_data_structure_path(contract_name)
                #print (snapshot_path)
                snapshot_data_structure = SnapshotDataStructure.load_summary(snapshot_path)
                if snapshot_data_structure is None:
                    print(f"Snapshot data structure for {contract_name} not found. Skipping...")
                    continue
                interfaces += self._exported(snapshot_data_structure.typescript_interfaces.common_contract_state_snapshot_interface_code)
                interfaces += self._exported(snapshot_data_structure.typescript_interfaces.user_data_snapshot_interface_code)
            
        with open(self.context.snapshot_interface_code_path(), 'w') as f:
            f.write("// Generated by SnapshotCodeGenerator\n\n")
            f.write(interfaces)
            print(interfaces)
        
        self.context.commit("Snapshot interfaces generated successfully.")

    def _exported(self, code: str) -> str:
        """
        Helper function to format exported code
        """
        if code.startswith("export "):
            return code + "\n\n"
        if code.startswith("interface "):
            return code.replace("interface ", "export interface ") + "\n\n"
        return code
    

if __name__ == "__main__":
    context = prepare_context_lazy({
        "run_id": "1747743579",
        "submission_id": "b2467fc4-e77a-4529-bcea-09c31cb2e8fe",
        "github_repository_url": "https://github.com/svylabs/stablebase"
    })
    generator = SnapshotCodeGenerator(context)
    generator.generate()
    print("Snapshot code generation completed.")

        
                