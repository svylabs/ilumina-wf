import { Snapshot, SnapshotProvider } from "@svylabs/ilumina";
import { Contract } from "ethers";
import { Actor } from "@svylabs/ilumina";

{% for contract in contract_instances %}
import { {{ contract.function_name }} } from "./{{ contract.snapshot_file_name}}";
{% endfor %}

export interface ContractSnapshot {
{% for contract in contract_instances %}
    {{ contract.reference_name }}: {{ contract.interface_name }};
{% endfor %}
}

export class ContractSnapshotProvider implements SnapshotProvider {
    private contracts: Record<string, Contract>;
    private actors: Actor[];

    constructor(contracts: Record<string, Contract>, actors: Actor[]) {
        this.contracts = contracts;
        this.actors = actors;
    }

    async snapshot(): Promise<Snapshot> {   
        const snapshot: Snapshot = {
            contractSnapshot: {},
            actorSnapshot: {}
        };
        const contractSnapshot = {};
        {% for contract in contract_instances %}
        contractSnapshot["{{ contract.reference_name }}"] = await {{ contract.function_name}}(this.contracts.{{ contract.reference_name }}, this.actors);
        {% endfor %}
        snapshot.contractSnapshot = contractSnapshot;
        return snapshot;
    }
}